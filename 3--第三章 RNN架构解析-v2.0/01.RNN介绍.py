# RNN结构能够很好利用序列之间的关系, 因此针对自然界具有连续性的输入序列, 如人类的语言,
# 语音等进行很好的处理, 广泛应用于NLP领域的各项任务, 如文本分类, 情感分析, 意图识别, 机器翻译等

# 第一步: 用户输入了"What time is it ?", 我们首先需要对它进行基本的分词, 因为RNN是按照顺序工作的, 每次只接收一个单词进行处理.
# "What time is it ?"  -->>  ["What","time","is","it","?"]

# 第二步: 首先将单词"What"输送给RNN, 它将产生一个输出ouput_1.

# 第三步: 继续将单词"time"输送给RNN, 但此时RNN不仅仅利用"time"来产生输出ouput_2, 还会使用来自上一层隐层输出ouput_1作为输入信息.

# 第四步: 重复这样的步骤, 直到处理完所有的单词.

# 第五步: 最后，将最终的隐层输出O5进行处理来解析用户意图.


"""
按照输入和输出的结构进行分类:
    N vs N - RNN:这种适合生成等长的诗句，输入和输出一样大
    N vs 1 - RNN:这种适合处理分类任务输入多个，最终等到一个
    1 vs N - RNN:这种结构可用于将图片生成文字任务等
    N vs M - RNN:适用于机器翻译类型任务上面
按照RNN的内部构造进行分类:
    传统RNN
    LSTM
    Bi-LSTM
    GRU
    Bi-GRU
"""
